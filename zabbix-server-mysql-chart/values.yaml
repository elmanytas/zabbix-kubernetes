## Zabbix server mysql image version
## ref: https://hub.docker.com/r/zabbix/
##
image:
  zabbix_server_mysql:
    ## Zabbix server mysql image version
    ## ref: https://hub.docker.com/r/zabbix/zabbix-server-mysql/tags
    ##
    registry: docker.io
    repository: zabbix/zabbix-server-mysql
    tag: ubuntu-6.2-latest
    ## Specify a imagePullPolicy
    ## Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'
    ## ref: http://kubernetes.io/docs/user-guide/images/#pre-pulling-images
    ##
    pullPolicy: Always
    ## Optionally specify an array of imagePullSecrets.
    ## Secrets must be manually created in the namespace.
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
    ##
    # pullSecrets:
    #   - myRegistryKeySecretName
  zabbix_web_nginx_mysql:
    ## Zabbix web nginx mysql image version
    ## ref: https://hub.docker.com/r/zabbix/zabbix-web-nginx-mysql/tags
    ##
    registry: docker.io
    repository: zabbix/zabbix-web-nginx-mysql
    tag: ubuntu-6.2-latest
    ## Specify a imagePullPolicy
    ## Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'
    ## ref: http://kubernetes.io/docs/user-guide/images/#pre-pulling-images
    ##
    pullPolicy: Always
    ## Optionally specify an array of imagePullSecrets.
    ## Secrets must be manually created in the namespace.
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
    ##
    # pullSecrets:
    #   - myRegistryKeySecretName
  zabbix_agent:
    ## Zabbix agent image version
    ## ref: https://hub.docker.com/r/zabbix/zabbix-agent/tags
    ##
    registry: docker.io
    repository: zabbix/zabbix-agent
    tag: ubuntu-6.2-latest
    ## Specify a imagePullPolicy
    ## Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'
    ## ref: http://kubernetes.io/docs/user-guide/images/#pre-pulling-images
    ##
    pullPolicy: Always
    ## Optionally specify an array of imagePullSecrets.
    ## Secrets must be manually created in the namespace.
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
    ##
    # pullSecrets:
    #   - myRegistryKeySecretName

## Strings to partially override fullname templates (will maintain the release name)
##
nameOverride: {}
#   zabbix_server_mysql:
#   zabbix_web_nginx_mysql:


## Strings to fully override fullname templates
##
fullnameOverride: {}
#   zabbix_server_mysql:
#   zabbix_web_nginx_mysql:


## Set up update strategy for zabbix installation. Set to Recreate if you use persistent volume that cannot be mounted by more than one pods to makesure the pods is destroyed first.
## ref: https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#strategy
## Example:
## updateStrategy:
##  type: RollingUpdate
##  rollingUpdate:
##    maxSurge: 25%
##    maxUnavailable: 25%
updateStrategy:
  zabbix_server_mysql:
    type: Recreate
  zabbix_web_nginx_mysql:
    type: RollingUpdate

## Use an alternate scheduler, e.g. "stork".
## ref: https://kubernetes.io/docs/tasks/administer-cluster/configure-multiple-schedulers/
##
# schedulerName:

replicaCount:
  zabbix_web_nginx_mysql: 2

##
## MariaDB chart configuration
##
## https://github.com/helm/charts/blob/master/stable/mariadb/values.yaml
##
mariadb:
  ## Create a database and a database user
  ## ref: https://github.com/bitnami/bitnami-docker-mariadb/blob/master/README.md#creating-a-database-user-on-first-run
  ##
  auth:
    ## If the password is not specified, mariadb will generates a random password
    ##
    ## Fix password because mariadb chart under certain conditions changes it when upgrading
    rootPassword: zabbix
    database: zabbix
    username: zabbix
    password: zabbix

  primary:
    ## Enable persistence using Persistent Volume Claims
    ## ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
    ##
    persistence:
      enabled: true
      ## mariadb data Persistent Volume Storage Class
      ## If defined, storageClassName: <storageClass>
      ## If set to "-", storageClassName: "", which disables dynamic provisioning
      ## If undefined (the default) or set to null, no storageClassName spec is
      ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
      ##   GKE, AWS & OpenStack)
      ##
      # storageClass: "-"
      accessMode: ReadWriteOnce
      size: 8Gi

## Kubernetes configuration
## Use LoadBalancer or ClusterIP
##
service:
  zabbix_server_mysql:
    type: ClusterIP
    # TCP
    port: 10051
  zabbix_web_nginx_mysql:
    type: ClusterIP
    # HTTP
    port: 80

## Enable persistence using Persistent Volume Claims
## ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
##
persistence:
  ## zabbix data Persistent Volume Storage Class
  ## If defined, storageClassName: <storageClass>
  ## If set to "-", storageClassName: "", which disables dynamic provisioning
  ## If undefined (the default) or set to null, no storageClassName spec is
  ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
  ##   GKE, AWS & OpenStack)
  ##
  # storageClass: "-"
  ##
  alertscripts:
    enabled: false
    accessMode: ReadWriteOnce
    size: 100Mi
    claimName: alertscripts
  externalscripts:
    enabled: false
    accessMode: ReadWriteOnce
    size: 100Mi
    claimName: externalscripts
  enc:
    enabled: false
    accessMode: ReadWriteOnce
    size: 100Mi
    claimName: enc
  mibs:
    enabled: false
    accessMode: ReadWriteOnce
    size: 100Mi
    claimName: mibs
  modules:
    enabled: false
    accessMode: ReadWriteOnce
    size: 100Mi
    claimName: modules
  snmptraps:
    enabled: false
    accessMode: ReadWriteOnce
    size: 100Mi
    claimName: snmptraps
  ssh_keys:
    enabled: false
    accessMode: ReadWriteOnce
    size: 100Mi
    claimName: ssh-keys
  ssl:
    certs:
      enabled: false
      accessMode: ReadWriteOnce
      size: 100Mi
      claimName: ssl-certs
    keys:
      enabled: false
      accessMode: ReadWriteOnce
      size: 100Mi
      claimName: ssl-keys
    ssl_ca:
      enabled: false
      accessMode: ReadWriteOnce
      size: 100Mi
      claimName: ssl-ssl-ca
  userscripts:
    enabled: false
    accessMode: ReadWriteOnce
    size: 200Mi
    claimName: userscripts

## Configure resource requests and limits
## ref: http://kubernetes.io/docs/user-guide/compute-resources/
##
resources:
  requests:
    memory: 512Mi
    cpu: 300m

## Node labels for pod assignment
## Ref: https://kubernetes.io/docs/user-guide/node-selection/
##
nodeSelector: {}

## Tolerations for pod assignment
## Ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
##
tolerations: []

## Affinity for pod assignment
## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
##
affinity: {}

## Pod annotations
## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
##
podAnnotations: {}

zabbix_vars:
  php_tz: Europe/Riga
  zbx_server_name: zabbix
  zbx_timeout: 3
  zbx_unsafeuserparameters: "0"
  zbx_enableremotecommands: "0"
  zbx_logremotecommands: "0"
  zbx_cachesize: "8M"

## Configure extra options for liveness and readiness probes
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes)
zabbix_web_nginx_probes:
  livenessProbe:
    initialDelaySeconds: 20
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1
  readinessProbe:
    initialDelaySeconds: 10
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1
zabbix_server_mysql_probes:
  livenessProbe:
    initialDelaySeconds: 60
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 60
    successThreshold: 1
  readinessProbe:
    initialDelaySeconds: 10
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 60
    successThreshold: 1
zabbix_agent_probes:
  livenessProbe:
    initialDelaySeconds: 60
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1
  readinessProbe:
    initialDelaySeconds: 10
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1

## Configure the ingress resource that allows you to access the
## Zabbix installation. Set up the URL
## ref: http://kubernetes.io/docs/user-guide/ingress/
##
ingress:
  ## Set to true to enable ingress record generation
  enabled: false

  ## When the ingress is enabled, a host pointing to this will be created
  hostname: zabbix.local

  ## Ingress annotations done as key:value pairs
  ## For a full list of possible ingress annotations, please see
  ## ref: https://github.com/kubernetes/ingress-nginx/blob/master/docs/user-guide/nginx-configuration/annotations.md
  ##
  annotations: {}
  # cert-manager.io/cluster-issuer: letsencrypt-prod
  # kubernetes.io/ingress.class: nginx

  ## The tls configuration for the ingress
  ## see: https://kubernetes.io/docs/concepts/services-networking/ingress/#tls
  tls: []
  ## tls:
  ## - hosts:
  ##     - zabbix.local
  ##   secretName: zabbix.local-tls
  ##
